// Code generated by "gengrapher -type=ping"; DO NOT EDIT.

package ping

import (
	"context"

	"github.com/faceair/jio"
	"github.com/longsolong/flow/pkg/orchestration/request"
	"github.com/longsolong/flow/pkg/orchestration/single_processor/graph"
)

// NewGrapher ...
func NewGrapher(ctx context.Context, rawRequestData []byte) (*graph.Grapher, error) {
	req, err := newRequest(ctx, rawRequestData)
	if err != nil {
		return nil, err
	}
	p, err := newPlotter(ctx, req)
	if err != nil {
		return nil, err
	}
	g := graph.NewGrapher(req, p.DAG, p.Chain, p)
	return g, nil
}

func newRequest(ctx context.Context, rawRequestData []byte) (*request.Request, error) {
	requestArgs, err := jio.ValidateJSON(&rawRequestData, schema)
	if err != nil {
		return nil, err
	}
	req := request.NewRequestWithContext(ctx)
	req.RequestArgs = requestArgs["requestArgs"].(map[string]interface{})
	for _, v := range requestArgs["requestTags"].([]interface{}) {
		v := v.(map[string]interface{})
		req.RequestTags = append(req.RequestTags, request.Tag{Name: v["name"].(string), Value: v["value"].(string)})
	}
	return req, nil
}

// newPlotter ...
func newPlotter(ctx context.Context, req *request.Request) (*plotter, error) {
	p := &plotter{Plotter: graph.NewPlotter(NAME, VERSION)}
	if err := p.Begin(ctx, req); err != nil {
		return nil, err
	}
	return p, nil
}
